/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/*
 Universal selector * will select each and every element on the page
 Whenever we cam we should use inheritance and avoid setting it on the universal selector

 box-sizing: inherit forcing inheritance
 */
*,
*::after,
*::before{
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}

/*
Setting a root font-size
Bad practice to set the font-size to 10px, we prevent the user from changing it as its overriding the default fault size of the browser

100% will mean 16px
62.5% = 10px

box-sizing: border-box changes the box model so that the border and the padding is no longer added to the total width/height

 */
html {
    font-size: 62.5%;
    box-sizing: border-box;
}

/*
Body element selector
Everything related to font, we do not the the universal selected.
Properties will get inherited
 */
body {
    font-family: "latto", sans-serif;
    font-weight: 400;
    /*font-size: 16px;*/
    line-height: 1.7;
    color: #777;
    padding: 3rem;
}

/*
Class selector
95vh - At every point the height of this element should be 95% of the view point height
background-size: cover - Whatever the width of the view-point, it will try to fit the element inside of the box
background-position: top - It ensures that whatever the view point size, the top of the image will always stays of the top of the container
rgba(126,213,111,0.8) - red green blue and the opacity
clip-path:polygon - The element will be still be visible when we crop - 0 0 (x y) we do not want it to change
 */
.header {
    height: 95vh;
    background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 131, 0.8)), url("../img/hero.jpg");
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    position: relative;
}

/*
We want place the image in the left side corner, one way of doing this is Absolute Positioning
Next section will learn more about Absolute Positioning
Top/Left: Where does this measurement start:

The reference is a parent element which has its position set to relative.
For the logo-box, it is the header

 */
.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}

.header__logo {
    height: 3.5rem;
}

/*
left 50% means of the width of the parent element.
but we want to make it exact center, we need to shift it.
We need to translate this entire box, now these 50% are no longer in relation to the parent element but of the element itself

The top 40 left 50, were in relation to parent element
The translate(), this is in relation to the element itself
 */
.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #fff;
    text-transform: uppercase;

    /*
     Prevent the shakky animation (No one knows why) for heading-primary-main
     Determines if the backpart of an element when we transform is visible to the user
     */
    backface-visibility: hidden;
    margin-bottom: 6rem;
}

/*
display: block so we get them treated as block element so we have the line break
 */
.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;

    /*
    How fast/slow
    easein - start slow and becomes faster
    easeout - start fast and becomes slow
    */
    animation-timing-function: ease-in;

    /*animation-iteration-count: 3; - animations happens 3 times*/
    /*animation-delay: 1s; - start after 1s*/
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation: moveInRight 1s ease-out;
}

/*
Two types of animation:
- Transition Property
- Advanced (Keyframes)
  0 - When the animation starts
  100 - When animation finish

For browser performance, it is best to animate only two different property (Opacity and Transform), this is what the browser is optimised for.

translate(0) - Look at the original

translateX (Moves from left to right), hence the -100
 */

@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }
    80% {
        transform: translate(1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translate(-1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(3rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

/*
.btn:link this is a psudo class (Link Pseudo class)
Pseudo class is a special state of a selector

why inline-block?
So it counts as a block, we should always do this when we want to give padding, width..etc to element

how do we center the button to middle?
we can do the absolute positioning, transform..etc but this is overkill
since it is an inline block element, it is still treated as if it was text and hence all we have to do it to set the text-align property to center

For animation:
We could use the keyframes..etc but we will use the transition property (easiest one)
transition: all (or which property we want to animate) or all (all properties are enabled to be animated
 */
.btn:link,
.btn.visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    position: relative;
    font-size: 1.6rem;
}

.btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 1rem 2rem rgba(0, 0, 0, .2);
}

/*
The -1 is not in relation to the hover, but to the initial link state
 */
.btn:active {
    transform: translateY(-1px);
    box-shadow: 0 .5rem 1rem rgba(0, 0, 0, .2);
}

.btn--white {
    background-color: white;
    color: #777;
}

/*
We going to use the after Pseudo element
after: Add a virtual element right after the element that we are selecting, and we can style that element

The trick is to add an element that looks exactly like the button we already have but we put it behind the button
And when we hover out of the button, then this hidden Pseudo element basically goes back behind the button

For an after pseudo element, we need:

content: Doest matter what is is, can even be empty
display: inline-block

The after pseudo element gets treated as a child element

We want to behind the actual button using absolute positioning:
 position: absolute;
 top: 0;
 left: 0;

It needs a reference, in this case it will be the header (did that before) but we do not want it to be the header, as we want it to be hidden after the button
So the reference should be the button

z-index defines the position of the element if they are one on top of the other
-1 so its defs behind the button

 */

.btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    transition: all .4s;
}

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
    transform: scaleX(1.5) scaleY(1.6);
    opacity: 0;
}

/*
animation fill mode - backwards:
It automatically applies the styles of the 0 percent before the animation can start:
These styles will be applied:
    0% {
        opacity: 0;
        transform: translateY(30px);
    }

 */
.btn--animated {
    animation: moveInBottom .5s ease-out .75s;
    animation-fill-mode: backwards;
}